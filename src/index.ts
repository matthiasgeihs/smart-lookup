import { app, globalShortcut, ipcMain, session, BrowserWindow, Menu, Tray } from 'electron';
import path from 'node:path';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let mainWindow: BrowserWindow;

const createWindow = (): void => {
  if (mainWindow) {
    throw new Error('Main window already exists');
  }

  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 100,
    width: 600,
    maxWidth: 800,
    maxHeight: 600,
    frame: false,
    resizable: false,
    show: false,
    hiddenInMissionControl: true,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      devTools: !app.isPackaged,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Allow talking to Ollama server.
  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Content-Security-Policy': ["connect-src 'self' http://127.0.0.1:11434"]
      }
    })
  });

  ipcMain.on('resize-window', (event, arg) => {
    const [width, height] = mainWindow.getSize();
    const widthChanged = arg.width && width != arg.width;
    const heightChanged = arg.height && height != arg.height;
    if (widthChanged || heightChanged) {
      mainWindow.setSize(
        arg.width || width,
        arg.height || height,
      );
    }
  });

  ipcMain.on('hide-window', () => {
    mainWindow.hide();
  });

  globalShortcut.register('Alt+Space', () => {
    mainWindow.show();
  });

  // Create tray item.
  (() => {
    const iconFileName = 'trayTemplate.png';
    const iconPath = app.isPackaged
      ? path.join(__dirname, "..", "..", "..", iconFileName)
      : path.join(__dirname, "..", "..", "assets", iconFileName);
    const tray = new Tray(iconPath);
  
    const contextMenu = Menu.buildFromTemplate([
      { label: `Quit ${app.name}`, type: 'normal', click: app.quit },
    ])
    tray.setContextMenu(contextMenu)
  
    tray.setToolTip(app.name)
  })();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
// app.on('window-all-closed', () => {
//   app.quit();
// });

// app.on('activate', () => {
//   // On OS X it's common to re-create a window in the app when the
//   // dock icon is clicked and there are no other windows open.
//   // if (BrowserWindow.getAllWindows().length === 0) {
//   //   createWindow();
//   // }
//   if (mainWindow) {
//     mainWindow.show();
//   }
// });

app.on("did-resign-active", () => {
  mainWindow.hide();
});

app.dock.hide();

// Run at login.
// app.setLoginItemSettings({
//   openAtLogin: true,
// });

process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  if (mainWindow) {
    mainWindow.webContents.executeJavaScript(`alert("Main: Uncaught Exception: ${error.message}")`);
  }
});

process.on('unhandledRejection', (reason) => {
  console.error('Unhandled Rejection:', reason);
  if (mainWindow) {
    mainWindow.webContents.executeJavaScript(`alert("Main: Unhandled Rejection: ${reason}")`);
  }
});
